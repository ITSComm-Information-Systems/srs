from django.db import models
from django.utils import timezone
from django.contrib.auth.models import User

# Create your models here.
class Role(models.Model):  
    display_seq_no = models.PositiveIntegerField(unique=True, blank=True, null=True)
    role = models.CharField(max_length=30,unique=True)
    role_description = models.CharField(max_length=1000)
    grantable_by_dept = models.BooleanField(default = False)
    active = models.BooleanField(default=True)
    inactivation_date = models.DateTimeField('Date Inactivated', blank=True, null=True)
    create_date = models.DateTimeField('Date Created', auto_now_add=True)
#   created_by = models.ForeignKey(User, on_delete=models.PROTECT, related_name='created_by')
    created_by = models.CharField(max_length=150, default='Will be autogenerated')
    last_update_date = models.DateTimeField('Last Date Updated', auto_now=True)
#    last_updated_by = models.CharField(max_length=150, default=User.get_username('self'))
    last_updated_by = models.CharField(max_length=150, default='Will be autogenerated')

    def __str__(self):
        return self.role

#    def __init__(self, *args, **kwargs):
#        super(Role, self).__init__(*args, **kwargs)
#        self.old_last_update_date = self.last_update_date

    def save(self, *args, **kwargs):
        if not self.active and self.inactivation_date is None:
            self.inactivation_date = timezone.now()
        elif self.active and self.inactivation_date is not None:
            self.inactivation_date = None
#        if self.old_last_update_date != self.last_update_date and self.last_update_date:
#            self.last_updated_by = 'New user'
#        elif self.old_last_update_date == self.last_update_date:
#            self.last_updated_by = 'Old user'
        if self.pk is None:
            self.created_by = 'First user'
            self.last_updated_by = 'First user'
        elif self.pk is not None:
            self.last_updated_by = 'New user'
        super(Role, self).save(*args, **kwargs)


class Privilege(models.Model):
    display_seq_no = models.PositiveIntegerField(unique=True, blank=True, null=True)
    privilege = models.CharField(max_length=30, unique=True)
    privilege_description = models.CharField(max_length=1000)
    active = models.BooleanField(default=True)
    inactivation_date = models.DateTimeField('Date Inactivated', blank=True, null=True)
    create_date = models.DateTimeField('Date Created', auto_now_add=True)
    created_by = models.CharField(max_length=150, default='Will be autogenerated')
    last_update_date = models.DateTimeField('Last Date Updated', auto_now=True)
    last_updated_by = models.CharField(max_length=150, default='Will be autogenerated')

    def __str__(self):
        return self.privilege

    def save(self, *args, **kwargs):
        if not self.active and self.inactivation_date is None:
            self.inactivation_date = timezone.now()
        elif self.active and self.inactivation_date is not None:
            self.inactivation_date = None
        if self.pk == None:
            self.created_by = 'First user'
            self.last_updated_by = 'First user'
        elif self.pk != None:
            self.last_updated_by = 'New user'
        super(Privilege, self).save(*args, **kwargs)

class Restriction(models.Model):
    display_seq_no = models.PositiveIntegerField(unique=True, blank=True, null=True)
    restriction_type = models.CharField(max_length=10, unique=False)
    restriction = models.CharField(max_length=30, unique=True)
    restriction_description = models.CharField(max_length=1000)
    active = models.BooleanField(default=True)
    inactivation_date = models.DateTimeField('Date Inactivated', blank=True, null=True)
    create_date = models.DateTimeField('Date Created', auto_now_add=True)
    created_by = models.CharField(max_length=150, default='Will be autogenerated')
    last_update_date = models.DateTimeField('Last Date Updated', auto_now=True)
    last_updated_by = models.CharField(max_length=150, default='Will be autogenerated')

    def __str__(self):
        return self.restriction

    def save(self, *args, **kwargs):
        if not self.active and self.inactivation_date is None:
            self.inactivation_date = timezone.now()
        elif self.active and self.inactivation_date is not None:
            self.inactivation_date = None
        if self.pk == None:
            self.created_by = 'First user'
            self.last_updated_by = 'First user'
        elif self.pk != None:
            self.last_updated_by = 'New user'
        super(Restriction, self).save(*args, **kwargs)

class RolePrivilege(models.Model):
    role = models.ForeignKey(Role, on_delete=models.PROTECT)
    privilege = models.ForeignKey(Privilege, on_delete=models.PROTECT)
    restriction_permitted = models.BooleanField
#    grantable_privilege = models.BooleanField(default=1, blank=False, null=False)
    active = models.BooleanField(default=True)
    inactivation_date = models.DateTimeField('Date Inactivated', blank=True, null=True)
    create_date = models.DateTimeField('Date Created', auto_now_add=True)
    created_by = models.CharField(max_length=150, default='Will be autogenerated')
    last_update_date = models.DateTimeField('Last Date Updated', auto_now=True)
    last_updated_by = models.CharField(max_length=150, default='Will be autogenerated')

    class Meta:
       db_table = 'oscauth_role_privilege'

#    def __str__(self):
#        return Role.role

    def save(self, *args, **kwargs):
        if not self.active and self.inactivation_date is None:
            self.inactivation_date = timezone.now()
        elif self.active and self.inactivation_date is not None:
            self.inactivation_date = None
        if self.pk == None:
            self.created_by = 'First user'
            self.last_updated_by = 'First user'
        elif self.pk != None:
            self.last_updated_by = 'New user'
        super(RolePrivilege, self).save(*args, **kwargs)

class RolePrivRestriction(models.Model):
    role = models.ForeignKey(Role, on_delete=models.PROTECT)
    privilege = models.ForeignKey(Privilege, on_delete=models.CASCADE)
    restriction = models.ForeignKey(Restriction, on_delete=models.CASCADE)
    active = models.BooleanField(default=True)
    inactivation_date = models.DateTimeField('Date Inactivated', blank=True, null=True)
    create_date = models.DateTimeField('Date Created', auto_now_add=True)
    created_by = models.CharField(max_length=150, default='Will be autogenerated')
    last_update_date = models.DateTimeField('Last Date Updated', auto_now=True)
    last_updated_by = models.CharField(max_length=150, default='Will be autogenerated')

    class Meta:
       db_table = 'oscauth_role_priv_restriction'

#    def __str__(self):
#        return Role.role

    def save(self, *args, **kwargs):
        if not self.active and self.inactivation_date is None:
            self.inactivation_date = timezone.now()
        elif self.active and self.inactivation_date is not None:
            self.inactivation_date = None
        if self.pk == None:
            self.created_by = 'First user'
            self.last_updated_by = 'First user'
        elif self.pk != None:
            self.last_updated_by = 'New user'
        super(RolePrivRestriction, self).save(*args, **kwargs)
